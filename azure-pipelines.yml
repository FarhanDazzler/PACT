trigger: 
- main
- dev
- qa

resources:
  repositories:
  - repository: appsectemplates
    type: git
    name: DevSecOps/DevSecOps

stages:
- stage: Build
  jobs:
  - job: SecureScan
    displayName: SecureScan
    pool:
      vmImage: 'ubuntu-latest'

    variables:
            ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
                scanTemplate: pipeline_templates/Security_tasks/prepareSonarcloudPR.yml@appsectemplates
            ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
                scanTemplate: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates

    steps:
      - checkout: self
      - checkout: appsectemplates
    
      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist/assets
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist/assets/images
      
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: '$(Build.Repository.Name)'
     
      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: '$(Build.Repository.Name)'
          customCommand: 'run build'
              
      - template: ${{ variables['scanTemplate'] }}
        parameters:
          SCServiceConnection: 'SonarcloudServer'
          SCProjectKey: 'Global_P2P_Transformation_frontend'
          SCProjectName: 'Global_P2P_Transformation_frontend'
          SCBaseDirPath: './$(Build.Repository.Name)'
          SCSourceEncoding: 'UTF-8'
          ${{ if or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'))}}:
            SCBranchName: '$(Build.SourceBranchName)'
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            SCPRKey: $(System.PullRequest.PullRequestId)
            SCPrBranch: $(System.PullRequest.SourceBranch)
            SCPrBaseBranch: $(System.PullRequest.TargetBranch)
        

      - template: pipeline_templates/secure_code_scan.yml@appsectemplates
        parameters:
          scanSonarCloud: true
          sonarCloudGate: false
          SCServiceConnection: 'SonarcloudServer'
          SCOrganization: 'sonarcloud-ado' 
          
          scanSnyk: true
          SKFailOnIssues: false
          SkServiceConnection: 'SnykServer'
          SkOrganization: 'f8e30283-d4c9-47be-821e-f7bcc1b2afca'
          SkAdditionalArgs: '--all-projects --prune-repeated-subdependencies --detection-depth=4' 
          App360ID: 'SE-03646'

          scanApiiro: true
          AprServiceConnection: 'apiiro'
          AprSkipOnScanFailure: false
    
      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist/assets
      #       ls -R $(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist/assets/images
        
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      # - task: CopyFiles@2
      #   inputs:
      #     SourceFolder: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/dist/assets/images'
      #     Contents: '**'
      #     TargetFolder: '$(Build.ArtifactStagingDirectory)/images'
          
        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'drop'
          publishLocation: 'pipeline'
