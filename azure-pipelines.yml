trigger: 
- main
- dev
- qa

resources:
  repositories:
  - repository: appsectemplates
    type: git
    name: DevSecOps/DevSecOps

stages:
- stage: Build
  jobs:
  - job: SecureScan
    displayName: SecureScan
    pool:
      vmImage: 'ubuntu-latest'

    variables:
            ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
                scanTemplate: pipeline_templates/Security_tasks/prepareSonarcloudPR.yml@appsectemplates
            ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
                scanTemplate: pipeline_templates/Security_tasks/prepareSonarCloud.yml@appsectemplates

    steps:
      - checkout: self
      - checkout: appsectemplates
      - script: |
          npm install @vitejs/plugin-react vite
        displayName: 'Install Vite and React plugin'

      - script: |
          echo 'import react from "@vitejs/plugin-react";' > vite.config.js
          echo 'import { defineConfig } from "vite";' >> vite.config.js
          echo '' >> vite.config.js
          echo '// https://vitejs.dev/config/' >> vite.config.js
          echo 'export default defineConfig({' >> vite.config.js
          echo '  plugins: [react()],' >> vite.config.js
          echo '  server: {' >> vite.config.js
          echo '    port: 3000,' >> vite.config.js
          echo '  },' >> vite.config.js
          echo '});' >> vite.config.js
        displayName: 'Create Vite configuration file'

      - script: |
          cat vite.config.js
        displayName: 'Show Vite configuration'

              
      - template: ${{ variables['scanTemplate'] }}
        parameters:
          SCServiceConnection: 'SonarcloudServer'
          SCProjectKey: 'Global_P2P_Transformation_frontend'
          SCProjectName: 'Global_P2P_Transformation_frontend'
          SCBaseDirPath: './$(Build.Repository.Name)'
          ${{ if or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'))}}:
            SCBranchName: '$(Build.SourceBranchName)'
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            SCPRKey: $(System.PullRequest.PullRequestId)
            SCPrBranch: $(System.PullRequest.SourceBranch)
            SCPrBaseBranch: $(System.PullRequest.TargetBranch)
        
#    - template: pipeline_templates/build_code.yml@appsectemplates
#      parameters:
#     


      - template: pipeline_templates/secure_code_scan.yml@appsectemplates
        parameters:
          scanSonarCloud: true
          sonarCloudGate: true
          SCServiceConnection: 'SonarcloudServer'
          SCOrganization: 'sonarcloud-ado' 
          
          scanSnyk: true
          SKFailOnIssues: true
          SkServiceConnection: 'SnykServer'
          SkOrganization: 'f8e30283-d4c9-47be-821e-f7bcc1b2afca'
          SkAdditionalArgs: '--all-projects --prune-repeated-subdependencies --detection-depth=4' 
          App360ID: 'SE-03646'

          scanApiiro: true
          AprServiceConnection: 'apiiro'
          AprSkipOnScanFailure: false
      
  #    - task: PublishPipelineArtifact@1
  #      inputs:
  #        targetPath: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/build'
  #        artifact: 'build_artifact'
  #        publishLocation: 'pipeline'
